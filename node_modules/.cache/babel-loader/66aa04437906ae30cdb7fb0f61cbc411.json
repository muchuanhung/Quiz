{"ast":null,"code":"import { normalizeStyle as _normalizeStyle, createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, withModifiers as _withModifiers, vShow as _vShow, withDirectives as _withDirectives, TransitionGroup as _TransitionGroup, withCtx as _withCtx, createVNode as _createVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"questions-ctr\"\n};\nconst _hoisted_2 = {\n  class: \"progress\"\n};\nconst _hoisted_3 = {\n  class: \"status\"\n};\nconst _hoisted_4 = {\n  class: \"question\"\n};\nconst _hoisted_5 = {\n  class: \"answers\"\n};\nconst _hoisted_6 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", {\n    class: \"bar\",\n    style: _normalizeStyle({\n      width: `${$props.questionsAnswered / $props.questions.length * 100}%`\n    })\n  }, null, 4\n  /* STYLE */\n  ), _createElementVNode(\"div\", _hoisted_3, _toDisplayString($props.questionsAnswered) + \" out of \" + _toDisplayString($props.questions.length) + \" questions answered \", 1\n  /* TEXT */\n  )]), _createVNode(_TransitionGroup, {\n    name: \"fade\"\n  }, {\n    default: _withCtx(() => [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($props.questions, (question, qi) => {\n      return _withDirectives((_openBlock(), _createElementBlock(\"div\", {\n        class: \"single-question\",\n        key: question.q\n      }, [_createElementVNode(\"div\", _hoisted_4, _toDisplayString(question.q), 1\n      /* TEXT */\n      ), _createElementVNode(\"div\", _hoisted_5, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(question.answers, answer => {\n        return _openBlock(), _createElementBlock(\"div\", {\n          class: \"answer\",\n          key: answer.text,\n          onClick: _withModifiers($event => $options.selectAnswer(answer.is_correct), [\"prevent\"])\n        }, _toDisplayString(answer.text), 9\n        /* TEXT, PROPS */\n        , _hoisted_6);\n      }), 128\n      /* KEYED_FRAGMENT */\n      ))])])), [[_vShow, $props.questionsAnswered === qi]]);\n    }), 128\n    /* KEYED_FRAGMENT */\n    ))]),\n    _: 1\n    /* STABLE */\n\n  })]);\n}","map":{"version":3,"mappings":";;EACOA,KAAK,EAAC;;;EACJA,KAAK,EAAC;;;EAKJA,KAAK,EAAC;;;EAWJA,KAAK,EAAC;;;EACNA,KAAK,EAAC;;;;uBAlBjBC,oBA8BM,KA9BN,cA8BM,CA7BJC,oBAQM,KARN,cAQM,CAPJA,oBAGO,KAHP,EAGO;IAFLF,KAAK,EAAC,KAED;IADJG,KAAK;MAAAC,UAAeC,2BAAoBA,iBAAUC,MAA7C,GAAmD;IAAnD;EACD,CAHP;;EAAA,CAOI,EAHJJ,oBAEM,KAFN,cAEMK,iBADDF,wBACC,IADmB,UACnB,GAD2BE,iBAAGF,iBAAUC,MAAb,CAC3B,GADiD,sBADvD,EAEA;EAAA;EAFA,CAGI,CARN,CA6BI,EApBJE,aAmBmBC,gBAnBnB,EAmBmB;IAnBDC,IAAI,EAAC;EAmBJ,CAnBnB,EAA6B;sBAGzB,MAAmC,oBAFrCT,oBAiBMU,SAjBN,EAiBM,IAjBN,EAiBMC,YAfqBP,gBAerB,EAf8B,CAA1BQ,QAA0B,EAAhBC,EAAgB,KAAd;4CAFtBb,oBAiBM,KAjBN,EAiBM;QAhBJD,KAAK,EAAC,iBAgBF;QAdHe,GAAG,EAAEF,QAAQ,CAACG;MAcX,CAjBN,GAMEd,oBAA4C,KAA5C,cAA4CK,iBAAnBM,QAAQ,CAACG,CAAU,CAA5C,EAAmC;MAAA;MAAnC,GACAd,oBASM,KATN,cASM,oBARJD,oBAOMU,SAPN,EAOM,IAPN,EAOMC,YALaC,QAAQ,CAACI,OAKtB,EALGC,MAA0B,IAApB;6BAFfjB,oBAOM,KAPN,EAOM;UANJD,KAAK,EAAC,QAMF;UAJHe,GAAG,EAAEG,MAAM,CAACC,IAIT;UAHHC,OAAK,2BAAUC,sBAAaH,MAAM,CAACI,UAApB,CAAV,EAAwC,WAAxC;QAGF,CAPN,mBAMKJ,MAAM,CAACC,KANZ,EAMgB;QAAA;QANhB,EAMgBI,UANhB;OAOM,CAPN;;MAAA,CAQI,EATN,EAPF,cAIUlB,6BAAsBS;KAa1B,CAjBN;;IAAA,CAEqC,GAHV;;;;EAAA,CAA7B,CAoBI,CA9BN","names":["class","_createElementBlock","_createElementVNode","style","width","$props","length","_toDisplayString","_createVNode","_TransitionGroup","name","_Fragment","_renderList","question","qi","key","q","answers","answer","text","onClick","$options","is_correct","_hoisted_6"],"sourceRoot":"","sources":["/Users/hung/Documents/GitHub/quiz/src/components/Questions.vue"],"sourcesContent":["<template>\n  <div class=\"questions-ctr\">\n    <div class=\"progress\">\n      <div\n        class=\"bar\"\n        :style=\"{ width: `${(questionsAnswered / questions.length) * 100}%` }\"\n      ></div>\n      <div class=\"status\">\n        {{ questionsAnswered }} out of {{ questions.length }} questions answered\n      </div>\n    </div>\n    <transition-group name=\"fade\">\n      <div\n        class=\"single-question\"\n        v-for=\"(question, qi) in questions\"\n        :key=\"question.q\"\n        v-show=\"questionsAnswered === qi\"\n      >\n        <div class=\"question\">{{ question.q }}</div>\n        <div class=\"answers\">\n          <div\n            class=\"answer\"\n            v-for=\"answer in question.answers\"\n            :key=\"answer.text\"\n            @click.prevent=\"selectAnswer(answer.is_correct)\"\n          >\n            {{ answer.text }}\n          </div>\n        </div>\n      </div>\n    </transition-group>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: [\"questions\", \"questionsAnswered\"],\n  emits: [\"question-answered\"],\n  methods: {\n    selectAnswer(is_correct) {\n      this.$emit(\"question-answered\", is_correct);\n    },\n  },\n};\n</script>"]},"metadata":{},"sourceType":"module"}